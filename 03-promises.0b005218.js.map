{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,QAASC,SAASC,cAAc,kBAChCC,OAAQF,SAASC,cAAc,iBAC/BE,SAAUH,SAASC,cAAc,mBACjCG,OAAQJ,SAASC,cAAc,SA4BjC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAlCPT,EAAKM,OAAOW,iBAAiB,UAE7B,SAAkBC,GAChBA,EAAEC,iBAEF,IAAMC,EAAQC,OAAOrB,EAAKC,QAAQqB,OAC5BC,EAAOF,OAAOrB,EAAKI,OAAOkB,OAC1BE,EAASH,OAAOrB,EAAKK,SAASiB,OAEpC,GAAIF,EAAQ,GAAKG,EAAO,GAAKC,GAAU,EACrC1B,EAAA2B,OAAOC,QAAQ,kCAEb,IAAG,IAAIC,EAAI,EAAGA,EAAIH,EAAQG,GAAK,EAAG,CAElCpB,EAAcoB,EAAI,EADAP,EAAQO,EAAIJ,GAE3BK,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBX,EAAA2B,OAAOK,QAAQ,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAE9DuB,OAAM,SAAAH,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBX,EAAA2B,OAAOC,QAAQ,sBAAqCK,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  delayEl: document.querySelector('[name=\"delay\"]'),\n  stepEl: document.querySelector('[name=\"step\"]'),\n  amountEl: document.querySelector('[name=\"amount\"]'),\n  formEl: document.querySelector('form'),\n};\n\nrefs.formEl.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  const delay = Number(refs.delayEl.value);\n  const step = Number(refs.stepEl.value);\n  const amount = Number(refs.amountEl.value);\n\n  if (delay < 0 || step < 0 || amount <= 0) {\n    Notify.failure('❌ Enter a positive number');\n  } else {\n    for (let i = 0; i < amount; i += 1) {\n      let delayNumber = delay + i * step;\n      createPromise(i + 1, delayNumber)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","delayEl","document","querySelector","stepEl","amountEl","formEl","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","delay1","Number","value","step","amount","Notify","failure","i","then","param","success","concat","catch"],"version":3,"file":"03-promises.0b005218.js.map"}